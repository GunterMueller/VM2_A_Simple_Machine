DEFINITION MODULE Token;

(* Tokens are what the lexical analyzer returns to the parser.  Keywords are
   distinct tokens, as are the special characters like parens, colon, etc.
   This module also exports typeType, which is a list of the possible types
   of variables in SIMPL.  For now, SIMPL only has integers, booleans and
   characters.  TokenLists are lists of tokens; they are used in the "varlist"
   procedure of the parser.
*)

EXPORT QUALIFIED token, tokenClass, stringType, stringlen, isType, isRelation,
    typeType, tokenClassToType,
    tokenList, emptyTokenList, tlToken, tlNext, addToTokenList,
    tlEmpty, freeTokenList;

CONST stringlen = 80;

TYPE
    tokenClass = (And, Assignment, Begin, Boolean, Char, Character, Colon,
        Comma, Divide, Do, Else, Elsif, End, EndOfInput, Equal, False,
        Function, Greater, GreaterEqual, Identifier, If, Int, Integer, Less,
        LessEqual, Lparen, Minus, Not, NotEqual, Or, Period, Plus, Procedure,
        Program, Read, Return, Rparen, Semicolon, String, Then, Times, True,
        UMinus, Var, While, Write);


    stringType = ARRAY[0..stringlen] OF CHAR;

    token = RECORD
                CASE class:tokenClass OF
                    Identifier, String: string: stringType;
                |   Int: integer: INTEGER;
                |   Character: ch: CHAR;
                END;
            END;

    tokenList;

    typeType = (tInteger, tBoolean, tChar, tUnknown);

VAR emptyTokenList: tokenList;

PROCEDURE tokenClassToType(tc:tokenClass):typeType;
(* Converts the token class Integer to the type tInteger, and so on. *)

PROCEDURE isType(tc:tokenClass):BOOLEAN;
(* Returns TRUE if tc = Integer, Char, or Boolean *)

PROCEDURE isRelation(tc:tokenClass):BOOLEAN;
(* Returns TRUE if tc is a relational operator (Equal, Greater, etc.) *)

PROCEDURE tlToken(tl:tokenList; VAR t:token);
(* Gets the first token in the token list. *)

PROCEDURE tlNext(tl:tokenList):tokenList;
(* Gets the rest of the token list. *)

PROCEDURE addToTokenList(VAR t:token; tl:tokenList):tokenList;
(* Add a token to the beginning of the token list. *)

PROCEDURE freeTokenList(tl:tokenList);
(* Free the storage used by the token list. *)

PROCEDURE tlEmpty(tl:tokenList):BOOLEAN;
(* Return TRUE if the token list is empty. *)

END Token.
